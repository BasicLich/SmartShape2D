extends "res://addons/gut/test.gd"

var FUNC = load("res://addons/rmsmartshape/plugin-functionality.gd")

signal yield_complete(number)


var yields_complete = 0
func yield_complete():
	yields_complete += 1
	gut.p("Yields Complete %s" % yields_complete)
	emit_signal("yield_complete", yields_complete)


func after_each():
	gut.p("Teardown", 2)
	yields_complete = 0


func test_delete_point():
	#yield(yield_for(2), YIELD)
	var shape = RMSS2D_Shape_Closed.new()
	add_child_autofree(shape)
	var coroutine = delete_test(shape)
	yield(coroutine, "completed")


func test_delete_consecutive():
	#yield(yield_for(2), YIELD)
	var shape = RMSS2D_Shape_Closed.new()
	add_child_autofree(shape)
	var coroutine = delete_test(shape)
	yield(coroutine, "completed")
	coroutine = delete_test(shape, 1)
	yield(coroutine, "completed")
	coroutine = delete_test(shape, 2)
	yield(coroutine, "completed")


func test_delete_point_async():
	#yield(yield_for(2), YIELD)
	var shapes = []
	for _i in range(0, 5, 1):
		var shape = RMSS2D_Shape_Closed.new()
		add_child_autofree(shape)
		shapes.push_back(shape)

	var coroutines = []
	for i in range(0, shapes.size(), 1):
		coroutines.push_back(delete_test(shapes[i], i))

	for c in coroutines:
		c.connect("completed", self, "yield_complete")

	yield(self, "yield_complete")
	yield(self, "yield_complete")
	yield(self, "yield_complete")
	yield(self, "yield_complete")
	yield(self, "yield_complete")
	assert_eq(yields_complete, 5)


func delete_test(shape: RMSS2D_Shape_Closed, i: int = 0):
	var undo = UndoRedo.new()
	var points = get_clockwise_points()
	var keys = []
	for i in range(0, points.size(), 1):
		var p = points[i]
		keys.push_back(shape.add_point(p))
	# Extra autogenerated point
	assert_eq(shape.get_point_count(), points.size() + 1, "%s: Autogen point" % i)

	FUNC.action_delete_point(undo, shape, keys[0])
	# Deleted initial point and, by way of constraints, the autogenerated point
	assert_eq(shape.get_point_count(), points.size() - 1, "%s: Delete added and autogen points" % i)
	for _i in range(0, 1, 1):
		yield(get_tree(), "physics_frame")
	# New point should be added to close the shape
	assert_eq(shape.get_point_count(), points.size(), "%s: New Autogen point" % i)

	FUNC.action_delete_point(undo, shape, keys[3])
	assert_eq(shape.get_point_count(), points.size() - 1, "%s: Delete Point" % i)
	for _i in range(0, 1, 1):
		yield(get_tree(), "physics_frame")
	# New point should NOT be added should already exist
	assert_eq(shape.get_point_count(), points.size() - 1, "%s: Autogen remains the same" % i)

	undo.undo()
	assert_eq(shape.get_point_count(), points.size(), "%s: Undo Delete" % i)
	for _i in range(0, 1, 1):
		yield(get_tree(), "physics_frame")
	# Shouldn't have changed
	assert_eq(shape.get_point_count(), points.size(), "%s: Autogen remains the same" % i)

	undo.undo()
	assert_eq(shape.get_point_count(), points.size() + 1, "%s: Undo Delete" % i)


func get_clockwise_points() -> Array:
	return [
		Vector2(0, 0),
		Vector2(50, -50),
		Vector2(100, 0),
		Vector2(100, 100),
		Vector2(0, 100),
		Vector2(-25, 125),
		Vector2(-50, 150),
		Vector2(-100, 100)
	]
