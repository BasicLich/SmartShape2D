extends "res://addons/gut/test.gd"

var FUNC = load("res://addons/rmsmartshape/plugin-functionality.gd")

func test_delete_point():
	var shape = RMSS2D_Shape_Closed.new()
	add_child_autofree(shape)

	var undo = UndoRedo.new()
	var points = get_clockwise_points()
	var keys = []
	for i in range(0, points.size(), 1):
		var p = points[i]
		keys.push_back(shape.add_point(p))
	# Extra autogenerated point
	assert_eq(shape.get_point_count(), points.size()+1)

	FUNC.action_delete_point(undo, shape, keys[0])
	# Deleted initial point and, by way of constraints, the autogenerated point
	assert_eq(shape.get_point_count(), points.size()-1)
	for _i in range(0, 2, 1):
		yield(get_tree(), "physics_frame")
	# New point should be added to close the shape
	assert_eq(shape.get_point_count(), points.size())


	FUNC.action_delete_point(undo, shape, keys[3])
	assert_eq(shape.get_point_count(), points.size()-1)
	for _i in range(0, 2, 1):
		yield(get_tree(), "physics_frame")
	# New point should NOT be added should already exist
	assert_eq(shape.get_point_count(), points.size()-1)

	undo.undo()
	assert_eq(shape.get_point_count(), points.size())
	for _i in range(0, 2, 1):
		yield(get_tree(), "physics_frame")
	# Shouldn't have changed
	assert_eq(shape.get_point_count(), points.size())

	undo.undo()
	assert_eq(shape.get_point_count(), points.size()+1)


func get_clockwise_points() -> Array:
	return [
		Vector2(0, 0),
		Vector2(50, -50),
		Vector2(100, 0),
		Vector2(100, 100),
		Vector2(0, 100),
		Vector2(-25, 125),
		Vector2(-50, 150),
		Vector2(-100, 100)
	]
